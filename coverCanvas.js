// Generated by CoffeeScript 1.6.2
(function() {
  var artworkEngine, artworkShape, artworkShapes, coverArtworkEngine, ctx, cv, h, maxSpeed, throttle, w,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    _this = this;

  cv = document.getElementById('artwork');

  cv.width = window.innerWidth;

  cv.height = window.innerHeight;

  ctx = cv.getContext('2d');

  w = cv.width;

  h = cv.height;

  artworkShapes = [];

  throttle = 100;

  maxSpeed = 1;

  coverArtworkEngine = null;

  artworkShape = (function() {
    function artworkShape(ctx, fixedOne, fixedTwo, moveOne, moveTwo, anchor, direction, speedOne, speedTwo) {
      this._ctx = ctx;
      this._fixedOne = fixedOne;
      this._fixedTwo = fixedTwo;
      this._moveOne = moveOne;
      this._moveTwo = moveTwo;
      this._direction = direction;
      this._anchor = anchor;
      this._speedOne = speedOne;
      this._speedTwo = speedTwo;
    }

    artworkShape.prototype.draw = function() {
      this._ctx.beginPath();
      this._ctx.moveTo(this._fixedOne.x, this._fixedOne.y);
      this._ctx.lineTo(this._fixedTwo.x, this._fixedTwo.y);
      this._ctx.lineTo(this._moveOne.x, this._moveOne.y);
      this._ctx.lineTo(this._moveTwo.x, this._moveTwo.y);
      this._ctx.closePath();
      if (this._anchor === "horizontal") {
        this._moveOne.x -= this._speedOne;
        this._moveTwo.x += this._speedTwo;
        if (this._moveOne.x < 0 || this._moveOne.x > w) {
          this._speedOne *= -1;
        }
        if (this._moveTwo.x < 0 || this._moveTwo.x > w) {
          this._speedTwo *= -1;
        }
      } else if (this._anchor === "vertical") {
        this._moveOne.y -= this._speedOne;
        this._moveTwo.y += this._speedTwo;
        if (this._moveOne.y < 0 || this._moveOne.y > h) {
          this._speedOne *= -1;
        }
        if (this._moveTwo.y < 0 || this._moveTwo.y > h) {
          this._speedTwo *= -1;
        }
      }
      if (Math.random() > 0.995) {
        this._speedOne *= -1;
        this._speedTwo *= -1;
      }
      return this._ctx.fill();
    };

    return artworkShape;

  })();

  artworkEngine = (function() {
    artworkEngine._artworkShapes = null;

    artworkEngine._throttle = 100;

    artworkEngine._maxSpeed = 1;

    function artworkEngine(ctx, w, h) {
      this.render = __bind(this.render, this);
      this.generateShapes = __bind(this.generateShapes, this);
      this.init = __bind(this.init, this);      this._ctx = ctx;
      this.w = w;
      this.h = h;
    }

    artworkEngine.prototype.init = function() {
      this._ctx.fillStyle = window.generationColour;
      this.generateShapes();
      return this.render();
    };

    artworkEngine.prototype.generateShapes = function() {
      this._ctx.clearRect(0, 0, this.w, this.h);
      this._artworkShapes = [];
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: 0
      }, "horizontal", true, Math.random() * maxSpeed, Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: this.w,
        y: 0
      }, {
        x: this.w,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: 0
      }, "horizontal", true, -Math.random() * maxSpeed, -Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: this.h
      }, {
        x: this.w,
        y: this.h
      }, {
        x: this.w,
        y: this.h / 2 + Math.random() * this.w / 2
      }, {
        x: 0,
        y: Math.random() * this._h / 2
      }, "vertical", true, Math.random() * maxSpeed, Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: 0
      }, {
        x: this.w,
        y: 0
      }, {
        x: this.w,
        y: Math.random() * this.h / 2
      }, {
        x: 0,
        y: this.h / 2 + Math.random() * this._h / 2
      }, "vertical", true, -Math.random() * maxSpeed, -Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: h
      }, {
        x: Math.random() * this.w,
        y: 0
      }, "horizontal", true, Math.random() * maxSpeed, Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: this.w,
        y: 0
      }, {
        x: w,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: 0
      }, "horizontal", true, -Math.random() * maxSpeed, -Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: this.h
      }, {
        x: this.w,
        y: this.h
      }, {
        x: this.w,
        y: this.h / 2 + Math.random() * this.w / 2
      }, {
        x: 0,
        y: Math.random() * this.h / 2
      }, "vertical", true, Math.random() * maxSpeed, Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: 0
      }, {
        x: this.w,
        y: 0
      }, {
        x: this.w,
        y: Math.random() * this.h / 2
      }, {
        x: 0,
        y: this.h / 2 + Math.random() * this.h / 2
      }, "vertical", true, -Math.random() * maxSpeed, -Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: 0
      }, {
        x: 0,
        y: h
      }, {
        x: Math.random() * this.w,
        y: h
      }, {
        x: Math.random() * this.w,
        y: 0
      }, "horizontal", true, Math.random() * maxSpeed, Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: this.w,
        y: 0
      }, {
        x: this.w,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: this.h
      }, {
        x: Math.random() * this.w,
        y: 0
      }, "horizontal", true, -Math.random() * maxSpeed, -Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: this.h
      }, {
        x: this.w,
        y: this.h
      }, {
        x: this.w,
        y: this.h / 2 + Math.random() * this.w / 2
      }, {
        x: 0,
        y: Math.random() * this.h / 2
      }, "vertical", true, Math.random() * maxSpeed, Math.random() * maxSpeed));
      this._artworkShapes.push(new artworkShape(this._ctx, {
        x: 0,
        y: 0
      }, {
        x: this.w,
        y: 0
      }, {
        x: this.w,
        y: Math.random() * this.h / 2
      }, {
        x: 0,
        y: this.h / 2 + Math.random() * this.h / 2
      }, "vertical", true, -Math.random() * maxSpeed, -Math.random() * maxSpeed));
      return console.log(this._artworkShapes);
    };

    artworkEngine.prototype.render = function() {
      var shape, that, _i, _len, _ref;

      console.log(' render');
      this._ctx.clearRect(0, 0, this.w, this.h);
      _ref = this._artworkShapes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        shape = _ref[_i];
        shape.draw();
      }
      that = this;
      return setTimeout(function() {
        return window.requestAnimationFrame(that.render);
      }, throttle);
    };

    return artworkEngine;

  })();

  $(window).load(function() {
    coverArtworkEngine = new artworkEngine(ctx, w, h);
    return coverArtworkEngine.init();
  });

  $(window).resize(function() {
    return coverArtworkEngine.generateShapes();
  });

}).call(this);
